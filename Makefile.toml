# Load from the env file
env_files = [{ path = ".env" }]

# Build Windows and Linux in parallel (Cross compiling with cargo cross) 
[tasks.build-all]
run_task = { name = ["build-windows", "build-linux"], parallel = true }

# Build a Linux build
[tasks.build-linux]
run_task = [
    # Windows host taks
    { name = [
        "build-linux-windows",
        "copy-build-linux-windows",
    ], condition = { platforms = [
        "windows",
    ] } },

    # Linux host tasks
    { name = [
        "build-linux-linux",
        "copy-build-linux-linux",
    ], condition = { platforms = [
        "linux",
    ] } },
]

# Build a Windows Build
[tasks.build-windows]
run_task = [
    # Windows host tasks (Both UI builds must run sequentual as they use the same output path)
    { name = [
        "build-windows-windows",
        "copy-build-windows-windows",
        "sign-windows",

        "build-windows-native-windows",
        "copy-build-windows-native-windows",
        "sign-windows-native",
    ], condition = { platforms = [
        "windows",
    ] } },

    # Linux host tasks
    { name = [
        "build-windows-linux",
        "copy-build-windows-linux",

        "build-windows-native-linux",
        "copy-build-windows-native-linux",
    ], condition = { platforms = [
        "linux",
    ] } },
]

# Signs the windows executable
[tasks.sign-windows]
command = "${SIGNTOOL_PATH}"
args = [
    "sign",
    "/fd",
    "SHA256",
    "/f",
    "${SIGN_FILE}",
    "/p",
    "${SIGN_PASSWORD}",
    ".release/binaries/pocket-relay-client.exe",
]

[tasks.sign-windows.condition]
env_set = ["SIGN_FILE", "SIGN_PASSWORD", "SIGNTOOL_PATH"]
platforms = ["windows"]
files_exist = ["${SIGNTOOL_PATH}"]

# Signs the windows executable (Native UI)
[tasks.sign-windows-native]
command = "${SIGNTOOL_PATH}"
args = [
    "sign",
    "/fd",
    "SHA256",
    "/f",
    "${SIGN_FILE}",
    "/p",
    "${SIGN_PASSWORD}",
    ".release/binaries/pocket-relay-client-native.exe",
]


[tasks.sign-windows-native.condition]
env_set = ["SIGN_FILE", "SIGN_PASSWORD", "SIGNTOOL_PATH"]
platforms = ["windows"]
files_exist = ["${SIGNTOOL_PATH}"]

# ---- Building from a windows host ----

# Build a Windows binary from a Windows host
[tasks.build-windows-windows]
command = "cargo"
args = ["build", "--release"]

# Build a Windows binary (Native UI) from a Windows host
[tasks.build-windows-native-windows]
command = "cargo"
args = ["build", "--release", "--no-default-features", "--features", "native"]

# Build the linux version (Requires cross be installed)
[tasks.build-linux-windows]
command = "cross"
args = ["build", "--target", "x86_64-unknown-linux-gnu", "--release"]

# Copy the linux build to the releases folder
[tasks.copy-build-linux-windows]
script_runner = "@shell"
script = "cp target/x86_64-unknown-linux-gnu/release/pocket-relay-client .release/binaries/pocket-relay-client"
dependencies = ["create-release-dir"]

# Copy the Windows build to the releases folder
[tasks.copy-build-windows-windows]
script_runner = "@shell"
script = "cp target/release/pocket-relay-client.exe .release/binaries/pocket-relay-client.exe"
dependencies = ["create-release-dir"]

# Copy the Windows build to the releases folder
[tasks.copy-build-windows-native-windows]
script_runner = "@shell"
script = "cp target/release/pocket-relay-client.exe .release/binaries/pocket-relay-client-native.exe"
dependencies = ["create-release-dir"]


# ---- Building from a linux host ----

# Build a Windows binary from a linux host
[tasks.build-windows-linux]
command = "cargo"
args = ["build", "--target", "x86_64-pc-windows-gnu", "--release"]


# Build a Windows binary (Native UI) from a linux host
[tasks.build-windows-native-linux]
command = "cargo"
args = [
    "build",
    "--target",
    "x86_64-pc-windows-gnu",
    "--release",
    "--no-default-features",
    "--features",
    "native",
]


# Build the linux version (Requires cross be installed)
[tasks.build-linux-linux]
command = "cross"
args = ["build", "--release"]

# Copy the linux build to the releases folder
[tasks.copy-build-linux-linux]
script_runner = "@shell"
script = "cp target/release/pocket-relay-client .release/binaries/pocket-relay-client-linux"
dependencies = ["create-release-dir"]

# Copy the Windows build to the releases folder
[tasks.copy-build-windows-linux]
script_runner = "@shell"
script = "cp target/x86_64-pc-windows-gnu/release/pocket-relay-client.exe .release/binaries/pocket-relay-client.exe"
dependencies = ["create-release-dir"]

# Copy the Windows build to the releases folder
[tasks.copy-build-windows-native-linux]
script_runner = "@shell"
script = "cp target/x86_64-pc-windows-gnu/release/pocket-relay-client.exe .release/binaries/pocket-relay-client-native.exe"
dependencies = ["create-release-dir"]


# Create releases directory
[tasks.create-release-dir]
condition = { files_not_exist = [".release/binaries"] }
script_runner = "@shell"
script = "mkdir -p .release/binaries"
